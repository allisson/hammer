// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	hammer "github.com/allisson/hammer"
	mock "github.com/stretchr/testify/mock"
)

// MessageService is an autogenerated mock type for the MessageService type
type MessageService struct {
	mock.Mock
}

// Create provides a mock function with given fields: message
func (_m *MessageService) Create(message *hammer.Message) error {
	ret := _m.Called(message)

	var r0 error
	if rf, ok := ret.Get(0).(func(*hammer.Message) error); ok {
		r0 = rf(message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: id
func (_m *MessageService) Find(id string) (hammer.Message, error) {
	ret := _m.Called(id)

	var r0 hammer.Message
	if rf, ok := ret.Get(0).(func(string) hammer.Message); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(hammer.Message)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: limit, offset
func (_m *MessageService) FindAll(limit int, offset int) ([]hammer.Message, error) {
	ret := _m.Called(limit, offset)

	var r0 []hammer.Message
	if rf, ok := ret.Get(0).(func(int, int) []hammer.Message); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]hammer.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByTopic provides a mock function with given fields: topicID, limit, offset
func (_m *MessageService) FindByTopic(topicID string, limit int, offset int) ([]hammer.Message, error) {
	ret := _m.Called(topicID, limit, offset)

	var r0 []hammer.Message
	if rf, ok := ret.Get(0).(func(string, int, int) []hammer.Message); ok {
		r0 = rf(topicID, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]hammer.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(topicID, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
