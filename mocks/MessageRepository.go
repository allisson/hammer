// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	hammer "github.com/allisson/hammer"
	mock "github.com/stretchr/testify/mock"
)

// MessageRepository is an autogenerated mock type for the MessageRepository type
type MessageRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: id
func (_m *MessageRepository) Find(id string) (hammer.Message, error) {
	ret := _m.Called(id)

	var r0 hammer.Message
	if rf, ok := ret.Get(0).(func(string) hammer.Message); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(hammer.Message)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: findOptions
func (_m *MessageRepository) FindAll(findOptions hammer.FindOptions) ([]hammer.Message, error) {
	ret := _m.Called(findOptions)

	var r0 []hammer.Message
	if rf, ok := ret.Get(0).(func(hammer.FindOptions) []hammer.Message); ok {
		r0 = rf(findOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]hammer.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(hammer.FindOptions) error); ok {
		r1 = rf(findOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Store provides a mock function with given fields: tx, message
func (_m *MessageRepository) Store(tx hammer.TxRepository, message *hammer.Message) error {
	ret := _m.Called(tx, message)

	var r0 error
	if rf, ok := ret.Get(0).(func(hammer.TxRepository, *hammer.Message) error); ok {
		r0 = rf(tx, message)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
