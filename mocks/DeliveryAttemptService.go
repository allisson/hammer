// Code generated by mockery 2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"

	hammer "github.com/allisson/hammer"
	mock "github.com/stretchr/testify/mock"
)

// DeliveryAttemptService is an autogenerated mock type for the DeliveryAttemptService type
type DeliveryAttemptService struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, id
func (_m *DeliveryAttemptService) Find(ctx context.Context, id string) (*hammer.DeliveryAttempt, error) {
	ret := _m.Called(ctx, id)

	var r0 *hammer.DeliveryAttempt
	if rf, ok := ret.Get(0).(func(context.Context, string) *hammer.DeliveryAttempt); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*hammer.DeliveryAttempt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx, findOptions
func (_m *DeliveryAttemptService) FindAll(ctx context.Context, findOptions hammer.FindOptions) ([]*hammer.DeliveryAttempt, error) {
	ret := _m.Called(ctx, findOptions)

	var r0 []*hammer.DeliveryAttempt
	if rf, ok := ret.Get(0).(func(context.Context, hammer.FindOptions) []*hammer.DeliveryAttempt); ok {
		r0 = rf(ctx, findOptions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*hammer.DeliveryAttempt)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, hammer.FindOptions) error); ok {
		r1 = rf(ctx, findOptions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
