// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import (
	hammer "github.com/allisson/hammer"
	mock "github.com/stretchr/testify/mock"
)

// DeliveryService is an autogenerated mock type for the DeliveryService type
type DeliveryService struct {
	mock.Mock
}

// Find provides a mock function with given fields: id
func (_m *DeliveryService) Find(id string) (hammer.Delivery, error) {
	ret := _m.Called(id)

	var r0 hammer.Delivery
	if rf, ok := ret.Get(0).(func(string) hammer.Delivery); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(hammer.Delivery)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: limit, offset
func (_m *DeliveryService) FindAll(limit int, offset int) ([]hammer.Delivery, error) {
	ret := _m.Called(limit, offset)

	var r0 []hammer.Delivery
	if rf, ok := ret.Get(0).(func(int, int) []hammer.Delivery); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]hammer.Delivery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindToDispatch provides a mock function with given fields: limit, offset
func (_m *DeliveryService) FindToDispatch(limit int, offset int) ([]hammer.Delivery, error) {
	ret := _m.Called(limit, offset)

	var r0 []hammer.Delivery
	if rf, ok := ret.Get(0).(func(int, int) []hammer.Delivery); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]hammer.Delivery)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
